function [theta, J_history] = gradientDescent(X, y, theta, alpha, num_iters)
%GRADIENTDESCENT Performs gradient descent to learn theta
%   theta = GRADIENTDESENT(X, y, theta, alpha, num_iters) updates theta by 
%   taking num_iters gradient steps with learning rate alpha

% Initialize some useful values
m = length(y); % number of training examples
J_history = zeros(num_iters, 1);

for iter = 1:num_iters

    % ====================== YOUR CODE HERE ======================
    % Instructions: Perform a single gradient step on the parameter vector
    %               theta. 
    %
    % Hint: While debugging, it can be useful to print out the values
    %       of the cost function (computeCost) and gradient here.
    %
	% X
	% theta
	% y
	%predictions = X*theta;
	%disp(sprintf('Theta before iteration %0.2f', iter))
	%theta
	vector = zeros(size(theta, 1), size(theta, 2));
	for iterator = 1:m, 
		w = (X(iterator, :)*theta - y(iterator, :))*X(iterator, :)
		vector = vector + w';
	end
	%sum(vector)
	%v = sum(predictions-y)
	%w = X(iter ,:)'
	theta = theta - (alpha/m)*vector;
	%disp(sprintf('Theta after iteration %0.2f', iter))
	%theta

    % ============================================================

    % Save the cost J in every iteration    
    J_history(iter) = computeCost(X, y, theta);

end

end
